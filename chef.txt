import RPi.GPIO as GPIO
import time
import paho.mqtt.client as mqtt
import board
import busio
from adafruit_pn532.i2c import PN532_I2C
from mpu6050 import mpu6050
import ssl
import certifi

# CONFIGURATION
UUID = "rpi"
MQTT_BROKER = "ef137b86ea2944f19a8b1bb71757d7bb.s1.eu.hivemq.cloud"
MQTT_PORT = 8883
MQTT_USERNAME = "littlechef"
MQTT_PASSWORD = "Cookbook123"

# MQTT CONNECTION
client = mqtt.Client()
client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
client.tls_set(ca_certs=certifi.where(), tls_version=ssl.PROTOCOL_TLSv1_2)
client.connect(MQTT_BROKER, MQTT_PORT)
client.loop_start()

# GPIO SETUP
GPIO.setmode(GPIO.BCM)
HALL_SENSORS = {
    5: "up",
    6: "down",
    13: "left",
    19: "right",
    26: "home"
}
for pin in HALL_SENSORS:
    GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# RFID SETUP
i2c = busio.I2C(board.SCL, board.SDA)
pn532 = PN532_I2C(i2c, debug=False)
pn532.SAM_configuration()

# ACCELEROMETER SETUP
sensor = mpu6050(0x68)
SMOOTHING_WINDOW = 5
accel_x_values = []
accel_y_values = []

# SENSOR FUNCTIONS

def read_hall_sensors():
    for pin, action in HALL_SENSORS.items():
        if GPIO.input(pin) == GPIO.LOW:
            payload = f"{UUID}::{action}"
            topic = f"nav/{action}"
            client.publish(topic, payload)
            print(f"Published to {topic}: {payload}")
            return True
    return False

def read_motion():
    THRESHOLD = 1.5
    global accel_x_values, accel_y_values

    accel_data = sensor.get_accel_data()
    accel_x = accel_data['x']
    accel_y = accel_data['y']

    accel_x_values.append(accel_x)
    accel_y_values.append(accel_y)

    if len(accel_x_values) > SMOOTHING_WINDOW:
        accel_x_values.pop(0)
        accel_y_values.pop(0)

    avg_x = sum(accel_x_values) / len(accel_x_values)
    avg_y = sum(accel_y_values) / len(accel_y_values)

    if avg_x > THRESHOLD:
        return publish_motion("FORWARD")
    elif avg_x < -THRESHOLD:
        return publish_motion("BACKWARD")
    elif avg_y > THRESHOLD:
        return publish_motion("LEFT")
    elif avg_y < -THRESHOLD:
        return publish_motion("RIGHT")
    return False

def publish_motion(direction):
    topic = "sensor/data/motion"
    payload = f"{UUID}::{direction}"
    client.publish(topic, payload)
    print(f"Published motion: {payload}")
    return True

def read_rfid():
    uid = pn532.read_passive_target(timeout=0.5)
    if uid:
        hex_uid = "-".join([hex(i)[2:] for i in uid])
        client.publish("sensor/data/rfid", f"{UUID}::{hex_uid}")
        print(f"Published RFID: {UUID}::{hex_uid}")
        return True
    return False

# MAIN LOOP
try:
    print("Starting Sensor Loop...")
    while True:
        if read_hall_sensors():
            print("HALL SENSOR ACTIVATED")
        elif read_motion():
            print("MOTION DETECTED")
        elif read_rfid():
            print("RFID DETECTED")
        time.sleep(0.5)

except KeyboardInterrupt:
    print("Stopping sensor handler...")
    GPIO.cleanup()
